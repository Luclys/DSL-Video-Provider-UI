/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, isAstNode } from 'langium';

export interface App extends AstNode {
    favicon: string
    name: string
    pages: Array<Page>
}

export const App = 'App';

export function isApp(item: unknown): item is App {
    return reflection.isInstance(item, App);
}

export interface Component extends AstNode {
    readonly $container: Layout;
    componentName: string
}

export const Component = 'Component';

export function isComponent(item: unknown): item is Component {
    return reflection.isInstance(item, Component);
}

export interface Layout extends AstNode {
    columnSize: Array<number>
    components: Array<Component>
    type: 'column' | 'row'
}

export const Layout = 'Layout';

export function isLayout(item: unknown): item is Layout {
    return reflection.isInstance(item, Layout);
}

export interface Page extends AstNode {
    readonly $container: App;
    name: string
    vues: Array<Vue>
}

export const Page = 'Page';

export function isPage(item: unknown): item is Page {
    return reflection.isInstance(item, Page);
}

export type Vue = 'desktop' | 'tablet' | 'mobile'

export type VideoProviderUiAstType = 'App' | 'Component' | 'Layout' | 'Page';

export type VideoProviderUiAstReference = never;

export class VideoProviderUiAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['App', 'Component', 'Layout', 'Page'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: VideoProviderUiAstReference): string {
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new VideoProviderUiAstReflection();
